// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"
	"time"

	"git.maxtroughear.dev/max.troughear/digital-timesheet/go-server/orm/model"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/Yamashou/gqlgenc/client"
	"github.com/emvi/hide"
	"github.com/kiwisheets/auth/permission"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	TwoFactorBackups      []string                 "json:\"twoFactorBackups\" graphql:\"twoFactorBackups\""
	TwoFactorEnabled      bool                     "json:\"twoFactorEnabled\" graphql:\"twoFactorEnabled\""
	Scopes                []*permission.Permission "json:\"scopes\" graphql:\"scopes\""
	Client                *model.Client            "json:\"client\" graphql:\"client\""
	ClientCount           int                      "json:\"clientCount\" graphql:\"clientCount\""
	Clients               []*model.Client          "json:\"clients\" graphql:\"clients\""
	CompanyName           *string                  "json:\"companyName\" graphql:\"companyName\""
	Company               model.Company            "json:\"company\" graphql:\"company\""
	OtherCompany          *model.Company           "json:\"otherCompany\" graphql:\"otherCompany\""
	Companies             []*model.Company         "json:\"companies\" graphql:\"companies\""
	Version               string                   "json:\"version\" graphql:\"version\""
	Me                    *model.User              "json:\"me\" graphql:\"me\""
	User                  *model.User              "json:\"user\" graphql:\"user\""
	UserForCompany        *model.User              "json:\"userForCompany\" graphql:\"userForCompany\""
	Users                 []*model.User            "json:\"users\" graphql:\"users\""
	UsersForCompany       []*model.User            "json:\"usersForCompany\" graphql:\"usersForCompany\""
	SearchUsers           []*model.User            "json:\"searchUsers\" graphql:\"searchUsers\""
	SearchUsersForCompany []*model.User            "json:\"searchUsersForCompany\" graphql:\"searchUsersForCompany\""
	Entities              []fedruntime.Entity      "json:\"_entities\" graphql:\"_entities\""
	Service               fedruntime.Service       "json:\"_service\" graphql:\"_service\""
}

type Mutation struct {
	Login                 model.AuthData "json:\"login\" graphql:\"login\""
	LoginSecure           string         "json:\"loginSecure\" graphql:\"loginSecure\""
	RefreshToken          string         "json:\"refreshToken\" graphql:\"refreshToken\""
	ChangePassword        bool           "json:\"changePassword\" graphql:\"changePassword\""
	NewTwoFactorBackups   []string       "json:\"newTwoFactorBackups\" graphql:\"newTwoFactorBackups\""
	EnableTwoFactor       []string       "json:\"enableTwoFactor\" graphql:\"enableTwoFactor\""
	DisableTwoFactor      bool           "json:\"disableTwoFactor\" graphql:\"disableTwoFactor\""
	CreateClient          *model.Client  "json:\"createClient\" graphql:\"createClient\""
	UpdateClient          *model.Client  "json:\"updateClient\" graphql:\"updateClient\""
	DeleteClient          *bool          "json:\"deleteClient\" graphql:\"deleteClient\""
	CreateCompany         *model.Company "json:\"createCompany\" graphql:\"createCompany\""
	DeleteCompany         *bool          "json:\"deleteCompany\" graphql:\"deleteCompany\""
	CreateUser            *model.User    "json:\"createUser\" graphql:\"createUser\""
	CreateUserForCompany  *model.User    "json:\"createUserForCompany\" graphql:\"createUserForCompany\""
	DeleteUser            *bool          "json:\"deleteUser\" graphql:\"deleteUser\""
	DeleteUserForCompany  *bool          "json:\"deleteUserForCompany\" graphql:\"deleteUserForCompany\""
	DeleteUsers           []bool         "json:\"deleteUsers\" graphql:\"deleteUsers\""
	DeleteUsersForCompany []bool         "json:\"deleteUsersForCompany\" graphql:\"deleteUsersForCompany\""
}
type GetClientByID struct {
	Client *struct {
		ID              hide.ID   "json:\"id\" graphql:\"id\""
		Name            string    "json:\"name\" graphql:\"name\""
		Website         *string   "json:\"website\" graphql:\"website\""
		VatNumber       *string   "json:\"vatNumber\" graphql:\"vatNumber\""
		BusinessNumber  *string   "json:\"businessNumber\" graphql:\"businessNumber\""
		Phone           *string   "json:\"phone\" graphql:\"phone\""
		CreatedAt       time.Time "json:\"createdAt\" graphql:\"createdAt\""
		ShippingAddress *struct {
			Name       string  "json:\"name\" graphql:\"name\""
			Street1    string  "json:\"street1\" graphql:\"street1\""
			Street2    *string "json:\"street2\" graphql:\"street2\""
			City       string  "json:\"city\" graphql:\"city\""
			State      *string "json:\"state\" graphql:\"state\""
			PostalCode int     "json:\"postalCode\" graphql:\"postalCode\""
			Country    string  "json:\"country\" graphql:\"country\""
		} "json:\"shippingAddress\" graphql:\"shippingAddress\""
		BillingAddress *struct {
			Name       string  "json:\"name\" graphql:\"name\""
			Street1    string  "json:\"street1\" graphql:\"street1\""
			Street2    *string "json:\"street2\" graphql:\"street2\""
			City       string  "json:\"city\" graphql:\"city\""
			State      *string "json:\"state\" graphql:\"state\""
			PostalCode int     "json:\"postalCode\" graphql:\"postalCode\""
			Country    string  "json:\"country\" graphql:\"country\""
		} "json:\"billingAddress\" graphql:\"billingAddress\""
		Contacts []*struct {
			ID               hide.ID                 "json:\"id\" graphql:\"id\""
			Email            *string                 "json:\"email\" graphql:\"email\""
			Phone            *string                 "json:\"phone\" graphql:\"phone\""
			Mobile           *string                 "json:\"mobile\" graphql:\"mobile\""
			PreferredContact *model.PreferredContact "json:\"preferredContact\" graphql:\"preferredContact\""
			Firstname        string                  "json:\"firstname\" graphql:\"firstname\""
			Lastname         string                  "json:\"lastname\" graphql:\"lastname\""
		} "json:\"contacts\" graphql:\"contacts\""
	} "json:\"client\" graphql:\"client\""
}
type Version struct {
	Version string "json:\"version\" graphql:\"version\""
}

const GetClientByIDQuery = `query GET_CLIENT_BY_ID ($id: ID!) {
	client(id: $id) {
		id
		name
		website
		vatNumber
		businessNumber
		phone
		createdAt
		shippingAddress {
			name
			street1
			street2
			city
			state
			postalCode
			country
		}
		billingAddress {
			name
			street1
			street2
			city
			state
			postalCode
			country
		}
		contacts {
			id
			email
			phone
			mobile
			preferredContact
			firstname
			lastname
		}
	}
}
`

func (c *Client) GetClientByID(ctx context.Context, id hide.ID, httpRequestOptions ...client.HTTPRequestOption) (*GetClientByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetClientByID
	if err := c.Client.Post(ctx, GetClientByIDQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const VersionQuery = `query VERSION {
	version
}
`

func (c *Client) Version(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*Version, error) {
	vars := map[string]interface{}{}

	var res Version
	if err := c.Client.Post(ctx, VersionQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
