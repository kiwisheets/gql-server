# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#

name: "CI/CD"

on:
  push:
  pull_request:

jobs:
  test:
    name: "Test"
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: go test
        run: go test

  set-var:
    name: "Set Variables"
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    runs-on: ubuntu-20.04

    outputs:
      docker-tag: ${{ steps.docker-tag.outputs.value }}
      terraform-dir: ${{ steps.terraform-dir.outputs.value }}

    steps:
      - uses: haya14busa/action-cond@v1
        id: docker-tag
        with:
          cond: ${{ github.ref == 'refs/heads/master' }}
          if_true: "prod"
          if_false: "develop"

      - uses: haya14busa/action-cond@v1
        id: terraform-dir
        with:
          cond: ${{ github.ref == 'refs/heads/master' }}
          if_true: "prod"
          if_false: "dev"

  docker-image:
    name: "Build Image"
    runs-on: ubuntu-20.04
    needs:
      - test
      - set-var

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "ENV"
        uses: rlespinasse/github-slug-action@v2.x

      - name: Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build
        run: docker build -t kiwisheets/gql-server:${{ needs.set-var.outputs.docker-tag }}-${{ env.GITHUB_SHA_SHORT }} .

      - name: Push
        run: docker push kiwisheets/gql-server:${{ needs.set-var.outputs.docker-tag }}-${{ env.GITHUB_SHA_SHORT }}

  deploy:
    name: "Deploy"
    runs-on:
      - self-hosted
      - linux
    needs:
      - docker-image
      - set-var

    defaults:
      run:
        shell: bash
        working-directory: terraform/${{ needs.set-var.outputs.terraform-dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: 'echo "$NOMAD_CACERT" > nomad-ca.pem'
        shell: bash
        env:
          NOMAD_CACERT: ${{ secrets.NOMAD_CACERT }}

      - name: "ENV"
        uses: rlespinasse/github-slug-action@v2.x

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_image_version: ${{ env.GITHUB_SHA_SHORT }}
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDRESS }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
          # VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          TF_VAR_image_version: ${{ env.GITHUB_SHA_SHORT }}
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDRESS }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
          # VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
